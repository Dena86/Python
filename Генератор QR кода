import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import qrcode
from PIL import Image, ImageTk
import io
import os
from datetime import datetime
from typing import Optional, Tuple

class QRGeneratorApp:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("Генератор QR-кодов")
        self.root.geometry("500x650")
        self.root.resizable(False, False)
        self.current_qr_image: Optional[Image.Image] = None
        self.tk_image: Optional[ImageTk.PhotoImage] = None
        self.setup_styles()
        self.create_widgets()
        self.center_window()
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def setup_styles(self):
        style = ttk.Style()
        style.configure("TFrame", background="#f0f0f0")
        style.configure("TLabel", background="#f0f0f0", font=("Arial", 10))
        style.configure("TButton", font=("Arial", 10), padding=5)
        style.configure("TEntry", padding=5)
        style.configure("Header.TLabel", font=("Arial", 14, "bold"))
        style.map(
            "TButton",
            foreground=[("active", "black"), ("!active", "black")],
            background=[("active", "#d9d9d9"), ("!active", "#e6e6e6")],
        )

    def create_widgets(self):
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        header = ttk.Label(
            main_frame,
            text="Генератор QR-кодов",
            style="Header.TLabel"
        )
        header.pack(pady=(0, 15))
        
        input_frame = ttk.Frame(main_frame)
        input_frame.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Label(input_frame, text="Текст/URL:").pack(anchor=tk.W)
        self.entry = ttk.Entry(input_frame)
        self.entry.pack(fill=tk.X, pady=(5, 0))
        self.entry.bind("<Return>", lambda e: self.generate_qr())
  
        settings_frame = ttk.Frame(main_frame)
        settings_frame.pack(fill=tk.X, pady=(0, 15))
        
        color_frame = ttk.Frame(settings_frame)
        color_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(color_frame, text="Цвет QR-кода:").pack(side=tk.LEFT)
        self.color_var = tk.StringVar(value="#000000")
        color_entry = ttk.Entry(color_frame, textvariable=self.color_var, width=10)
        color_entry.pack(side=tk.LEFT, padx=(5, 0))
        
        size_frame = ttk.Frame(settings_frame)
        size_frame.pack(fill=tk.X)
        
        ttk.Label(size_frame, text="Размер пикселей:").pack(side=tk.LEFT)
        self.size_var = tk.IntVar(value=10)
        size_spin = ttk.Spinbox(
            size_frame,
            from_=1,
            to=20,
            textvariable=self.size_var,
            width=5
        )
        size_spin.pack(side=tk.LEFT, padx=(5, 0))
        
        generate_btn = ttk.Button(
            main_frame,
            text="Сгенерировать QR-код",
            command=self.generate_qr
        )
        generate_btn.pack(pady=(0, 15))
        
        self.qr_canvas = tk.Canvas(
            main_frame,
            width=300,
            height=300,
            bg="white",
            bd=2,
            relief=tk.GROOVE
        )
        self.qr_canvas.pack()
        
        save_btn = ttk.Button(
            main_frame,
            text="Сохранить QR-код",
            command=self.save_qr
        )
        save_btn.pack(pady=(15, 0))
        
        self.status_var = tk.StringVar()
        status_bar = ttk.Label(
            main_frame,
            textvariable=self.status_var,
            relief=tk.SUNKEN
        )
        status_bar.pack(fill=tk.X, pady=(15, 0))

    def center_window(self):
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")

    def generate_qr(self):
        text = self.entry.get().strip()
        
        if not text:
            self.status_var.set("Ошибка: Введите текст или URL")
            return
        
        try:
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_H,
                box_size=self.size_var.get(),
                border=4,
            )
            qr.add_data(text)
            qr.make(fit=True)
            
            color = self.color_var.get()
            if not color.startswith("#"):
                color = "#" + color
            
            self.current_qr_image = qr.make_image(
                fill_color=color,
                back_color="white"
            ).convert("RGB")
            
            self.display_qr()
            
            self.status_var.set("QR-код успешно сгенерирован")
            
        except ValueError as e:
            self.status_var.set(f"Ошибка: {str(e)}")
        except Exception as e:
            self.status_var.set(f"Неизвестная ошибка: {str(e)}")

    def display_qr(self):

        if self.current_qr_image is None:
            return
            
        img = self.current_qr_image.copy()
        img.thumbnail((300, 300))
        
        self.tk_image = ImageTk.PhotoImage(img)
        
        self.qr_canvas.delete("all")
        self.qr_canvas.create_image(
            150, 150,
            image=self.tk_image
        )

    def save_qr(self):
        if self.current_qr_image is None:
            self.status_var.set("Ошибка: Нет QR-кода для сохранения")
            return
            
        try:

            default_name = f"qr_code_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            
            file_path = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[("PNG files", "*.png"), ("All files", "*.*")],
                initialfile=default_name,
                title="Сохранить QR-код"
            )
            
            if file_path:
                self.current_qr_image.save(file_path)
                self.status_var.set(f"QR-код сохранен: {os.path.basename(file_path)}")
                
        except Exception as e:
            self.status_var.set(f"Ошибка при сохранении: {str(e)}")

    def on_close(self):
        if messagebox.askokcancel("Выход", "Вы уверены, что хотите выйти?"):
            self.root.destroy()


def main():
    root = tk.Tk()
    app = QRGeneratorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
